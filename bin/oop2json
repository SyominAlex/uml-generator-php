#!/usr/bin/env php
<?php

if($argc != 3){
    echo 'Usage: oop2json <inputdirectory> <outputdirectory>'.PHP_EOL;
    exit();
}

list(,$inputdir,$outputdir) = $argv;

if(!is_dir($inputdir)){
    echo 'Input directory is not a directory'.PHP_EOL;
    die;
}
if(!is_dir($outputdir)){
    echo 'Output directory is not a directory'.PHP_EOL;
    die;
}

require_once(__DIR__ . '/../vendor/autoload.php');

// Scan only for .php files
$files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($inputdir));
$files = new RegexIterator($files, '/\.php$/');

foreach($files as $file){
    // Parse file for OOP concepts
    $code = file_get_contents($file);
    $parser = new \PhpParser\Parser(new \PhpParser\Lexer);
    $traverser = new \PhpParser\NodeTraverser;
    $visitor = new UmlGeneratorPhp\OopFilter;
    $visitor->setFilename($file);
    $traverser->addVisitor($visitor);
    $stmts = $parser->parse($code);
    $tree = $traverser->traverse($stmts);

    echo $file.PHP_EOL;
    $pinfo=pathinfo($file);
    $outputfiledir = str_replace($inputdir, $outputdir, $pinfo['dirname']);
    $outputfile = $outputfiledir . '/' . $pinfo['filename'] . '.json';
    $json = json_encode($tree);
    if($json != '[]'){
        if(!is_dir($outputfiledir)){
            mkdir($outputfiledir,0777,true);
        }
        file_put_contents($outputfile, $json);
    }
}