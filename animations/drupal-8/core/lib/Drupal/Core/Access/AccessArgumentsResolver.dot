digraph "Class Diagram" {
  node [shape=plaintext]
  "\\Drupal\\Core\\Access\\AccessArgumentsResolver" [
    label=<
<table border="1" cellpadding="2" cellspacing="0" cellborder="0">
<tr><td align="center">&laquo; class &raquo;</td></tr>
<tr><td align="center" title="class AccessArgumentsResolver">\\Drupal\\Core\\Access\\AccessArgumentsResolver</td></tr><hr />
<tr><td></td></tr>
<hr />
<tr><td align="left" title="public getArguments">+ getArguments(callable : callable, route : mixed, request : mixed, account : mixed)</td></tr>
<tr><td align="left" title="protected handleUnresolvedArgument"># handleUnresolvedArgument(parameter : mixed)</td></tr>
<tr><td align="left" title="protected getArgument"># getArgument(parameter : mixed, route : mixed, request : mixed, account : mixed)</td></tr>
<tr><td align="left" title="protected getReflector"># getReflector(callable : callable)</td></tr>
</table>
  >
  ];
  "\\Drupal\\Core\\Access\\AccessArgumentsResolverInterface" [
    label=<
<table border="1" cellpadding="2" cellspacing="0" cellborder="0">
<tr><td align="center">&laquo; interface &raquo;</td></tr>
<tr><td align="center" title="interface AccessArgumentsResolverInterface">\\Drupal\\Core\\Access\\AccessArgumentsResolverInterface</td></tr><hr />
<tr><td></td></tr>
<hr />
<tr><td align="left" title="public getArguments">+ getArguments(callable : callable, route : mixed, request : mixed, account : mixed)</td></tr>
</table>
  >
  ];
"\\Drupal\\Core\\Access\\AccessArgumentsResolverInterface" -> "\\Drupal\\Core\\Access\\AccessArgumentsResolver" [arrowhead="empty" style="dashed"];

}